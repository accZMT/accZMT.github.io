<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>llt</title>
  
  <subtitle>只想挽起你的手 戎马一生挥毫只为你</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://acczmt.top/"/>
  <updated>2018-11-09T03:34:36.456Z</updated>
  <id>https://acczmt.top/</id>
  
  <author>
    <name>李岚天</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python高阶函数</title>
    <link href="https://acczmt.top/2018/11/08/python%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0/"/>
    <id>https://acczmt.top/2018/11/08/python高阶函数/</id>
    <published>2018-11-08T04:00:00.000Z</published>
    <updated>2018-11-09T03:34:36.456Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>什么是高阶函数？</p></blockquote><ul><li>函数本身可以赋值给变量，赋值后变量为函数</li><li>允许将函数本身作为参数传入另一个函数</li><li>允许返回一个函数</li></ul><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul><li><a href="#map">map()</a></li><li><a href="#reduce">reduce()</a></li><li><a href="#sorted">sorted()</a></li><li><a href="#filter">filter()</a></li><li><a href="#eval">eval()</a></li></ul><h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><blockquote><p>map(function, iterable, …) </p></blockquote><ul><li>map()函数接收两个参数，一个是函数，一个是Iterable</li><li>map将传入的函数依次作用到序列的每个元素，并把结果作为新的Iterator返回</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">new_list = map(<span class="keyword">lambda</span> x: x*x, range(<span class="number">10</span>))</span><br><span class="line">print(type(new_list))</span><br><span class="line"><span class="comment"># &lt;class 'map'&gt;</span></span><br><span class="line">print(list(new_list))</span><br><span class="line"><span class="comment"># [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</span></span><br></pre></td></tr></table></figure><h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h2><blockquote><p>functools.reduce(function, iterable[, initializer])</p></blockquote><ul><li>reduce把一个函数作用在一个序列[x1, x2, x3, …]上</li><li>这个函数必须接收两个参数，reduce把结果继续和序列的下一个元素做累积计算</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求n的阶乘</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jie</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="comment"># 左边的参数x是累积值，右边的参数y是序列中的更新值。</span></span><br><span class="line">    <span class="keyword">return</span> reduce(<span class="keyword">lambda</span> x,y:x*y, range(<span class="number">1</span>, n+<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">print(jie(<span class="number">5</span>)) <span class="comment"># 120</span></span><br></pre></td></tr></table></figure><h2 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h2><blockquote><p>filter(function, iterable)</p></blockquote><ul><li>filter()函数用于过滤序列</li><li>接收一个函数和一个序列</li><li>filter()把传入的函数依次作用于每个元素，然后根据返回值是True还是False决定保留还是丢弃该元素。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 过滤列表中为int类型的数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_int</span><span class="params">(s)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> isinstance(s, int):</span><br><span class="line">        <span class="keyword">return</span> s</span><br><span class="line">result = filter(is_int, [<span class="number">1</span>, <span class="string">'hello'</span>, <span class="number">23</span>, <span class="string">'world'</span>])</span><br><span class="line">print(type(result))</span><br><span class="line"><span class="comment"># &lt;class 'filter'&gt;</span></span><br><span class="line">print(result)</span><br><span class="line"><span class="comment"># [1, 23]</span></span><br></pre></td></tr></table></figure><h2 id="sorted"><a href="#sorted" class="headerlink" title="sorted"></a>sorted</h2><blockquote><p>sorted(iterable, *, key=None, reverse=False)</p></blockquote><ul><li>sorted()函数就可以对list进行排序</li><li>从迭代项中返回一个新排序的列表。</li><li>它可以接收一个key函数来实现自定义的排序</li><li>key指定的函数将作用于list的每一个元素上，并根据key函数返回的结果进行排序</li><li>用sorted()排序的关键在于实现一个映射函数。</li><li>reverse = True 反向排序</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">print(sorted(<span class="string">"This is a test string from Andrew"</span>.split()))</span><br><span class="line"><span class="comment"># ['Andrew', 'This', 'a', 'from', 'is', 'string', 'test']</span></span><br><span class="line"></span><br><span class="line">print(sorted(<span class="string">"This is a test string from Andrew"</span>.split(), key=str.lower))</span><br><span class="line"><span class="comment"># ['a', 'Andrew', 'from', 'is', 'string', 'test', 'This']</span></span><br><span class="line"></span><br><span class="line">student_tuples = [</span><br><span class="line">    (<span class="string">'john'</span>, <span class="string">'A'</span>, <span class="number">15</span>),</span><br><span class="line">    (<span class="string">'jane'</span>, <span class="string">'B'</span>, <span class="number">12</span>),</span><br><span class="line">    (<span class="string">'dave'</span>, <span class="string">'B'</span>, <span class="number">10</span>),</span><br><span class="line">]</span><br><span class="line"><span class="comment"># 根据年龄排序</span></span><br><span class="line">print(sorted(student_tuples, key=<span class="keyword">lambda</span> student: student[<span class="number">2</span>]))</span><br><span class="line"><span class="comment"># [('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用itemgetter速度更快</span></span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter</span><br><span class="line">print(sorted(student_tuples, key=itemgetter(<span class="number">2</span>)))</span><br><span class="line"><span class="comment"># [('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># reverse=True 反向排序</span></span><br><span class="line">print(sorted(student_tuples, key=itemgetter(<span class="number">2</span>), reverse=<span class="keyword">True</span>))</span><br><span class="line"><span class="comment"># [('john', 'A', 15), ('jane', 'B', 12), ('dave', 'B', 10)]</span></span><br><span class="line"></span><br><span class="line">friends = [</span><br><span class="line">    &#123;<span class="string">"name"</span>: <span class="string">"Jane"</span>, <span class="string">"age"</span>: <span class="number">18</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"name"</span>: <span class="string">"KangKang"</span>, <span class="string">"age"</span>: <span class="number">19</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"name"</span>: <span class="string">"Feng"</span>, <span class="string">"age"</span>: <span class="number">15</span>&#125;,</span><br><span class="line">    &#123;<span class="string">"name"</span>: <span class="string">"Lee"</span>, <span class="string">"age"</span>: <span class="number">17</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">print(sorted(friends, key=itemgetter(<span class="string">"age"</span>)))</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">print(sorted(firends, key=<span class="keyword">lambda</span> x : x[<span class="string">"age"</span>]))</span><br><span class="line"><span class="comment"># [</span></span><br><span class="line"><span class="comment">#   &#123;'name': 'Feng', 'age': 15&#125;, </span></span><br><span class="line"><span class="comment">#   &#123;'name': 'Lee', 'age': 17&#125;, </span></span><br><span class="line"><span class="comment">#   &#123;'name': 'Jane', 'age': 18&#125;, </span></span><br><span class="line"><span class="comment">#   &#123;'name': 'KangKang', 'age': 19&#125;</span></span><br><span class="line"><span class="comment"># ]</span></span><br></pre></td></tr></table></figure><h2 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h2><blockquote><p>eval(expression, globals=None, locals=None)</p></blockquote><ul><li>参数是字符串和可选全局变量和局部变量。</li><li>如果提供，全局必须是字典。如果提供，本地可以是任何映射对象。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">eval(<span class="string">"print('hello world')"</span>)</span><br><span class="line"><span class="comment"># hello world</span></span><br><span class="line">eval(<span class="string">"3+3"</span>)</span><br><span class="line"><span class="comment"># 6</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;什么是高阶函数？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;函数本身可以赋值给变量，赋值后变量为函数&lt;/li&gt;
&lt;li&gt;允许将函数本身作为参数传入另一个函数&lt;/li&gt;
&lt;li&gt;允许返回一个函数&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;目录
      
    
    </summary>
    
    
      <category term="python" scheme="https://acczmt.top/tags/python/"/>
    
  </entry>
  
</feed>
